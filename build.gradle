/*
 * Copyright 2011 LMAX Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    ext {
        kotlin_version = '1.2.71'
        disruptor_version = '3.3.7'
        junit_version = '4.12'
    }
    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.2.71"
}
apply plugin: "org.jetbrains.kotlin.jvm"
apply plugin: 'java'
apply plugin: 'osgi'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'eclipse'   // Only used so the Eclipse STS Gradle plugin can see the 'perf' source set dependencies. :-(
//apply plugin: 'checkstyle'
apply plugin: 'idea'
apply plugin: 'kotlin'


defaultTasks 'build'

group = 'com.lmax'
version = new Version(major: 3, minor: 4, revision: 3)

ext {
    fullName = 'Disruptor Framework'
    fullDescription = 'Disruptor - Concurrent Programming Framework'
    teamName = 'LMAX Disruptor Development Team'
    siteUrl = 'http://lmax-exchange.github.com/disruptor'
    sourceUrl = 'git@github.com:LMAX-Exchange/disruptor.git'

    javaCompilerExecutable = System.env['JAVA_HOME'] ? System.env['JAVA_HOME'] + '/bin/javac' : 'javac'
    println("javaCompilerExecutable${javaCompilerExecutable}")

    if (!project.hasProperty('sonatypeUrl')) sonatypeUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
    if (!project.hasProperty('sonatypeUsername')) sonatypeUsername = ''
    if (!project.hasProperty('sonatypePassword')) sonatypePassword = ''
}
compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}



sourceSets {
    main.java.srcDirs += 'src/main/java'
    main.kotlin.srcDirs += 'src/main/kotlin'
    perf.java.srcDir file('src/perftest/java')
    perf.java.srcDir file('src/main/java')
    perf.kotlin.srcDir file('src/main/kotlin')
    perf.kotlin.srcDir file('src/perftest/kotlin')
}

eclipse.classpath.plusConfigurations += [sourceSets.perf.compileClasspath]

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "org.jetbrains.kotlin:kotlin-reflect"
    testCompile "org.jetbrains.kotlin:kotlin-test"

//    checkstyle 'com.puppycrawl.tools:checkstyle:8.12'
    testCompile 'junit:junit:4.12'

    perfCompile 'org.hdrhistogram:HdrHistogram:2.1.10'
    perfCompile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    perfCompile "org.jetbrains.kotlin:kotlin-reflect"
    perfCompile "org.jetbrains.kotlin:kotlin-test"
    perfCompile 'junit:junit:4.12'
    perfCompile 'com.github.javafaker:javafaker:0.16'

}

idea.module {
    testSourceDirs += sourceSets.perf.allSource.srcDirs
    scopes.TEST.plus += [configurations.perfCompile]
}

sourceCompatibility = 1.8
targetCompatibility = 1.8


compileJava {
    // Suppress warnings about using Unsafe and sun.misc
    options.compilerArgs << '-XDignore.symbol.file'
    options.fork = true
    options.debug = true
    options.forkOptions.executable = javaCompilerExecutable
    options.warnings = false
}

tasks.withType(Test) {
    maxParallelForks = Runtime.runtime.availableProcessors() / 2
}

compilePerfJava {
    classpath += sourceSets.main.runtimeClasspath
    classpath += sourceSets.test.runtimeClasspath
}

javadoc {
    title = 'Disruptor'

    options.addStringOption('XDignore.symbol.file', '-quiet')
    options.author = true
    options.bottom = "<i>Copyright &#169; 2011 - ${Calendar.instance[Calendar.YEAR]} LMAX Ltd. All Rights Reserved.</i>"
    options.use = true
    options.version = true
    options.showFromPublic()
}

jar {
    manifest.attributes('Built-By': System.properties['user.name'],
            'Bundle-Name': fullName,
            'Bundle-Vendor': teamName,
            'Bundle-Description': fullDescription,
            'Bundle-DocURL': siteUrl)
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}

def projectPom = {
    name = fullName
    description = fullDescription
    url = siteUrl

    scm {
        url = "scm:$sourceUrl"
        connection = "scm:$sourceUrl"
    }

    licenses {
        license {
            name = 'The Apache Software License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution = 'repo'
        }
    }

    developers {
        developer {
            id = 'team'
            name = teamName
            email = 'lmax-disruptor@googlegroups.com'
        }
    }
}

install {
    repositories.mavenInstaller.pom.project(projectPom)
}

signing {
    required { gradle.taskGraph.hasTask('uploadArchives') }
    sign configurations.archives
}

uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { deployment -> signing.signPom(deployment) }

        repository(url: sonatypeUrl) {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
        }

        pom.project(projectPom)
    }
}

build.dependsOn perfClasses

task perfJar(type: Jar) {
    baseName = project.name + '-perf'
    from { configurations.perfCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.perf.output
    from sourceSets.test.output
    with jar
}

class Version {
    int major, minor = 0, revision = 0
    boolean snapshot
    String stage

    String toString() {
        "$major.$minor.$revision${stage ? '.' + stage : ''}${snapshot ? '-SNAPSHOT' : ''}"
    }
}
